# Давайте реалізуємо клас, який надає інтерфейс для створення та
# зміни поля для гри Battleship. Він повинен мати такі публічні методи:
#
# __init__(self, ships), створити поле із заданими кораблями;
# fire(self, ceil), щоб імітувати постріл у клітинку.
# Розглянемо поле як матрицю 10х10.
#
# x	x	x	x	~	□	□	~	□	□
# ~	~	~	~	~	~	~	~	~	~
# □	~	~	~	□	□	□	~	□	□
# □	~	~	~	~	~	~	~	~	~
# □	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	□	~	□
# ~	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	□	~	□
# Перша координата кожної комірки є номером рядка.
#
# Друге - номер колонки.
#
# Верхній лівий кут має координати (0, 0).
#
# Правий нижній кут містить координати (9, 9).
#
# Корабель будемо визначати за координатами його кінців.
#
# Наприклад, корабель, позначений хрестиками, має кінці з
# координатами (0, 0)і (0, 3), тому йому відповідає
# кортеж ((0, 0), (0, 3)).
#
# Реалізуйте клас Battleship, який приймає список кораблів.
# Кожен корабель представлений таким кортежем.
#
# приклад:
#
# battle_ship = Battleship(
#     ships=[
#         ((0, 0), (0, 3)),
#         ((0, 5), (0, 6)),
#         ((0, 8), (0, 9)),
#         ((2, 0), (4, 0)),
#         ((2, 4), (2, 6)),
#         ((2, 8), (2, 9)),
#         ((9, 9), (9, 9)),
#         ((7, 7), (7, 7)),
#         ((7, 9), (7, 9)),
#         ((9, 7), (9, 7)),
#     ]
# )
# Це поле можна представити так:
#
# □	□	□	□	~	□	□	~	□	□
# ~	~	~	~	~	~	~	~	~	~
# □	~	~	~	□	□	□	~	□	□
# □	~	~	~	~	~	~	~	~	~
# □	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	□	~	□
# ~	~	~	~	~	~	~	~	~	~
# ~	~	~	~	~	~	~	□	~	□
# Ось ~порожня клітина і □колода.
#
# Якщо fireметод викликається, він має повернути один із таких рядків:
#
# "Miss!"- коли в даній стелі немає корабля;
# "Hit!"- коли в стелі є колода, але на відповідному кораблі є ще
# одна жива колода;
# "Sunk!"- коли є остання жива колода.
# приклад:
#
# print(
#     battle_ship.fire((0, 4)),  # Miss!
#     battle_ship.fire((0, 3)),  # Hit!
#     battle_ship.fire((0, 2)),  # Hit!
#     battle_ship.fire((0, 1)),  # Hit!
#     battle_ship.fire((0, 0)),  # Sunk!
# )
# Примітка: дотримуйтеся створеного шаблону та реалізуйте вже оголошені
# методи. Не соромтеся додавати власні методи для розширення
# функціональності.
#
# Додаткові завдання:
# 1. Поле друку
# Рекомендуємо застосувати цей метод, це значно спростить процес
# налагодження!
#
# Створити метод, print_fieldякий друкує всі клітинки поля рядок за
# рядком.
#
# Використовуйте ~символ для порожніх клітинок
# Використовуйте □символ для живих колод. Ви можете надрукувати його
# за допомогою символу Юнікод:
# print(u"\u25A1")
# Використовуйте *для попадання колод живого корабля
# Використовуйте xдля палуб корабля, що потонув
# Не соромтеся використовувати інші символи замість цих, якщо вважаєте,
# що це буде краще.
#
# 2. Перевірте введені дані
# Напишіть захищений метод _validate_field, який повинен перевірити
# такі умови після створення поля в конструкторі:
#
# загальна кількість кораблів має бути 10;
# має бути 4 однопалубних судна;
# має бути 3 двопалубних судна;
# повинно бути 2 трипалубних судна;
# має бути 1 чотирипалубний корабель;
# кораблі не повинні знаходитися в сусідніх клітинах (навіть якщо
# клітини є сусідами по діагоналі).